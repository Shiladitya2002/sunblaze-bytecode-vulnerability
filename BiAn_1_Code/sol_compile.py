import os
import subprocess
from pathlib import Path
from datasets import load_dataset

size = 10
input_dir = Path("C:\\Documents\\Dawn Song Lab\\Explore\\BiAn_1\\caches\\slither_dataset")
output_dir = Path("C:\\Documents\\Dawn Song Lab\\Explore\\BiAn_1\\caches\\compile_dataset")

#input_dir = Path("C:\\Documents\\Dawn Song Lab\\Explore\\BiAn_1\\caches\\obfuscate_dataset")
#output_dir = Path("C:\\Documents\\Dawn Song Lab\\Explore\\BiAn_1\\caches\\recompile_dataset")

print("Begin Directory Walk")
# --ast or --ast-compact-json????
base_command = "solc -o \"{output}\" --bin --{astcomm} --asm \"{input}\""
version_command = "solc-select use {version}"
fails = 0
succeeds = 0
astcomm = 'ast'

for version in os.listdir(input_dir):
    # Switch solc version
    out_obj = subprocess.Popen(version_command.format(version=version), stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True)
    out_obj.wait()
    stdout = out_obj.communicate()[0].decode()
    print("-----------------------------------")
    print(stdout)
    # Make output folder for solc version
    os.makedirs(output_dir / version, exist_ok=True)
    # Check version to change ast command
    if '0.6' in str(version): astcomm = 'ast-compact-json'
    # Loop through files in folder
    for file in os.listdir(input_dir / version):
        if succeeds >= size: break
        #Prepare variables and run compile command
        sol_input = str(input_dir / version / file)
        var_output = str(output_dir / version / file)
        out_obj = subprocess.Popen(base_command.format(input=sol_input, output=var_output, astcomm=astcomm), stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True)
        out_obj.wait()
        #Decode standard out
        stdout = out_obj.communicate()[0].decode()
        print("-----------------------------------")
        print(stdout)
        #Increment and print progress
        succeeds += 1
        if succeeds%100==0: print("# contracts compiled: " + str(succeeds))

print("Successfully compiled for: " + str(succeeds))
