from transformers import AutoModel, AutoConfig, AutoTokenizer
import torch

def batcher(iterable, n=1):
    l = len(iterable)
    for ndx in range(0, l, n):
        yield iterable[ndx:min(ndx + n, l)]

class codet5p_embedding:
    def __init__(self, device):
        checkpoint = "Salesforce/codet5p-110m-embedding"
        self.max_seq = 512
        self.device = device
        self.config = AutoConfig.from_pretrained(checkpoint, trust_remote_code=True)
        self.tokenizer = AutoTokenizer.from_pretrained(checkpoint, trust_remote_code=True)
        self.model = AutoModel.from_pretrained(checkpoint, trust_remote_code=True, torch_dtype=torch.float16).to(device)
        self.model.gradient_checkpointing_enable()

        self.batch = 30
        d_hid = 200  # dimension of the feedforward network model in ``nn.TransformerEncoder``
        nlayers = 2  # number of ``nn.TransformerEncoderLayer`` in ``nn.TransformerEncoder``
        nhead = 2  # number of heads in ``nn.MultiheadAttention``
        dropout = 0.2  # dropout probability
        self.encode_model = TransformerModel(nhead=nhead, d_hid=d_hid, nlayers=nlayers, dropout=dropout).to(device)
    
    def tokenize(self, asm):
        tokens = self.tokenizer(asm, padding=True, return_tensors="pt").to(self.device)
        return tokens
    
    def forward(self, ids):
        batches = torch.split(ids.input_ids, self.batch)
        outputs = []
        for batch in batches: 
            outputs.append(self.model(batch))
        output = torch.cat(outputs, 0)
        output = output[None, :]
        output = self.encode_model(output)
        return output
    
    def tokenize_forward(self, asm):
        outputs = []
        lens = [(i, len(asm[i].split())) for i in range(len(asm))]
        lens = sorted(lens, key = lambda tup: tup[1])
        for batch in batcher(asm, self.batch): 
            tokens = self.tokenizer(batch, padding=True, return_tensors="pt").to(self.device)
            if tokens.input_ids.shape[1] > self.max_seq: raise RuntimeError
            outputs.append(self.model(tokens.input_ids))
        output = torch.cat(outputs, 0)

        output2 = torch.zeros(output.shape, dtype=torch.float16).to(self.device)
        indices = torch.tensor([[tup[0] for _ in range(0, output.shape[1])] for tup in lens]).to(self.device)
        output2.scatter(0, indices, output)
        output2 = output2[None, :]
        output2 = self.encode_model(output2)
        return output2

        output2 = [None for i in range(len(output))]
        for i in range(len(output)): output2[lens[i][0]] = output[i]



        for batch in batcher(asm, self.batch): 
            #tokens = [torch.tensor(self.tokenizer.encode(block)) for block in batch]
            #tokens = torch.nn.utils.rnn.pack_sequence(tokens)
            tokens = self.tokenizer(batch, padding=True, return_tensors="pt").to(self.device)
            outputs.append(self.model(tokens.input_ids))
        output = torch.cat(outputs, 0)
        output = output[None, :]
        output = self.encode_model(output)
        return output
    
    def save(self, path):
        os.mkdir(path)
        self.model.save_pretrained(path / "embed_model")
        torch.save(self.encode_model.state_dict(), path / "encode_model")

    
import math
import os
from tempfile import TemporaryDirectory
from typing import Tuple

import torch
from torch import nn, Tensor
from torch.nn import TransformerEncoder, TransformerEncoderLayer
from torch.utils.data import dataset

class TransformerModel(nn.Module):

    def __init__(self, nhead: int, d_hid: int,
                 nlayers: int, dropout: float = 0.1, d_model: int = 256, out_d: int = 1024):
        super().__init__()
        self.model_type = 'Transformer'
        self.pos_encoder = PositionalEncoding(d_model, dropout)
        encoder_layers = TransformerEncoderLayer(d_model, nhead, d_hid, dropout)
        self.transformer_encoder = TransformerEncoder(encoder_layers, nlayers)
        self.d_model = d_model
        self.linear = nn.Linear(d_model, out_d)

        self.init_weights()

    def init_weights(self) -> None:
        initrange = 0.1
        self.linear.bias.data.zero_()
        self.linear.weight.data.uniform_(-initrange, initrange)

    def forward(self, src: Tensor, src_mask: Tensor = None) -> Tensor:
        """
        Arguments:
            src: Tensor, shape ``[seq_len, batch_size]``
            src_mask: Tensor, shape ``[seq_len, seq_len]``

        Returns:
            output Tensor of shape ``[seq_len, batch_size, out_d]``
        """
        src = src * math.sqrt(self.d_model)
        src = self.pos_encoder(src)
        output = self.transformer_encoder(src, src_mask)
        output = self.linear(output)
        return torch.mean(output, dim=1)[0]
    
class PositionalEncoding(nn.Module):

    def __init__(self, d_model: int, dropout: float = 0.1, max_len: int = 5000):
        super().__init__()
        self.dropout = nn.Dropout(p=dropout)

        position = torch.arange(max_len).unsqueeze(1)
        div_term = torch.exp(torch.arange(0, d_model, 2) * (-math.log(10000.0) / d_model))
        pe = torch.zeros(max_len, 1, d_model)
        pe[:, 0, 0::2] = torch.sin(position * div_term)
        pe[:, 0, 1::2] = torch.cos(position * div_term)
        self.register_buffer('pe', pe)

    def forward(self, x: Tensor) -> Tensor:
        """
        Arguments:
            x: Tensor, shape ``[seq_len, batch_size, embedding_dim]``
        """
        x = x + self.pe[:x.size(0)]
        return self.dropout(x)