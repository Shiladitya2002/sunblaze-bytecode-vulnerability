from pathlib import Path
import os
from byte2op import opcodes
from itertools import groupby
import json
import re

unoptimized_folder = Path("C:\\Documents\\Dawn Song Lab\\Dataset\\normal-unoptimize_15000\\compile_dataset")
optimized_folder = Path("C:\\Documents\\Dawn Song Lab\\Dataset\\normal-unoptimize_15000\\recompile_dataset")
json_folder = Path("C:\\Documents\\Dawn Song Lab\\Dataset\\normal-unoptimize_15000\\json_dataset2")
if_basic_block = False

instructions = tuple(opcodes.values())

def basic_block_extractor(rf):
    rf = open(optimized_folder / version / contract / file, "r", encoding='utf-8')
    lines = [line.strip() for line in rf]
    ops = [line.split("\t")[0] for line in lines]
    blocks = [[]]
    at = 0
    for op in ops:
        if op.startswith('/*'):
            continue
        elif ':' in op.split(" ")[0] and blocks[at]:
            blocks.append([])
            at += 1
        elif op.upper().startswith(instructions):
            op = re.split('\(| ', op)[0]
            blocks[at].append(op)
    return blocks

def block_join(blocks):
    blocks_join = [' '.join(block) for block in blocks]
    if if_basic_block:
        blocks_join = '\n '.join(blocks_join)
    return blocks_join

at = 0
for version in os.listdir(optimized_folder):
    print("Processing version:", version)
    os.makedirs(json_folder / version, exist_ok=True)
    for contract in os.listdir(optimized_folder / version):
        for file in os.listdir(optimized_folder / version / contract):
            if file.endswith('.evm') and os.path.exists(unoptimized_folder / version / contract / file):
                with open(optimized_folder / version / contract / file, "r") as rf_opt:
                    blocks_opt = basic_block_extractor(rf_opt)
                with open(unoptimized_folder / version / contract / file, "r") as rf_unopt:
                    blocks_unopt = basic_block_extractor(rf_unopt)
                
                if any(blocks_opt) and any(blocks_unopt):  
                    contract_pair = {'opt': block_join(blocks_opt), 'unopt': block_join(blocks_unopt)}
                    os.makedirs(json_folder / version / contract, exist_ok=True)
                    with open(json_folder / version / contract / file, "w") as wf_pair:
                        json.dump(contract_pair, wf_pair)

                    at += 1
                    if at%1000==0: print("Extracted:", str(at))

print("JSON Files Created:", str(at))

'''
lines = [
        "PUSH [ErrorTag]		  contract BasicToken is ERC20Basic {...",
        "    JUMPI			contract BasicToken is ERC20Basic {...",
        "tag1: ",
        "   JUMPDEST		contract BasicToken is ERC20Basic {...",
        "   PUSH #[$0]		contract BasicToken is ERC20Basic {...",
        "  DUP1			contract BasicToken is ERC20Basic {...",
        "PUSH [$0]		contract BasicToken is ERC20Basic {...",6
        "PUSH1 0x0		contract BasicToken is ERC20Basic {...",
        "CODECOPY			contract BasicToken is ERC20Basic {...",
        "PUSH1 0x0		contract BasicToken is ERC20Basic {...",
        "RETURN			contract BasicToken is ERC20Basic {...",
        ".data:",
        "0: ",
        ".code:",
        "    PUSH1 0x60		contract BasicToken is ERC20Basic {...",
        "    PUSH1 0x40		contract BasicToken is ERC20Basic {...",
]
instructions = opcodes.values()
lines = [line.strip() for line in lines]
ops = [line.split("\t")[0] for line in lines]
blocks = [[]]
at = 0
for op in ops:
    if op[0].isupper() and op[1].isupper():
        blocks[at].append(op)
    elif blocks[at]:
        blocks.append([])
        at += 1
print(blocks)
'''
                    
