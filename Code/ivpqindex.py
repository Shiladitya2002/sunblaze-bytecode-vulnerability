import pickle
import faiss
import math
class IVPQIndex():
    def __init__(self, vectors, labels):
        self.dimension = vectors.shape[1]
        self.vectors = vectors.astype('float32')
        self.labels = labels    
        
    def build(self, number_of_partition=None, search_in_x_partitions=2, subvector_size=8):
        if not number_of_partition: number_of_partition = math.ceil(math.sqrt(self.vectors.shape[0]))
        quantizer = faiss.IndexFlatL2(self.dimension)
        self.index = faiss.index_cpu_to_all_gpus(faiss.IndexIVFPQ(quantizer, 
                                      self.dimension, 
                                      number_of_partition, 
                                      search_in_x_partitions, 
                                      subvector_size))
        self.index.train(self.vectors)
        self.index.add(self.vectors)
        
    def query(self, vectors, k=10):
        distances, indices = self.index.search(vectors, k)
        return [self.labels[i] for i in indices[0]]
    
    def add(self, new_vectors):
        self.index.add(new_vectors)
    
    def save(self, loc):
        self.index = faiss.serialize_index(faiss.index_gpu_to_cpu(self.index))
        with open(loc, "wb") as f:
            pickle.dump(self, f)

    @staticmethod
    def load(loc):
        with open(loc, "rb") as f:
            chunk = pickle.load(f)
        chunk.index = faiss.index_cpu_to_all_gpus(faiss.deserialize_index(chunk.index))
        return chunk